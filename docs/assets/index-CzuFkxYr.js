(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))i(o);new MutationObserver(o=>{for(const s of o)if(s.type==="childList")for(const r of s.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&i(r)}).observe(document,{childList:!0,subtree:!0});function t(o){const s={};return o.integrity&&(s.integrity=o.integrity),o.referrerPolicy&&(s.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?s.credentials="include":o.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(o){if(o.ep)return;o.ep=!0;const s=t(o);fetch(o.href,s)}})();var u=(M=>(M.White="WHITE",M.Black="BLACK",M))(u||{}),h=(M=>(M.Pawn="PAWN",M.Knight="KNIGHT",M.Bishop="BISHOP",M.Rook="ROOK",M.Queen="QUEEN",M.King="KING",M))(h||{});class A{constructor(e,t,i,o){this.HandleClick=o,this.x=t,this.y=e,this.el=document.createElement("div"),this.el.id=`${t}-${e}`,this.el.classList.add("tile",`${(t+e)%2==0?"black":"white"}`),i.appendChild(this.el),this.el.addEventListener("click",()=>{this.HandleClick(this)})}x;y;el;piece;AddPiece(e){this.piece=e,this.el.classList.add(`${this.piece.color.toLowerCase()}-${this.piece.type.toLowerCase()}`)}RemovePiece(){this.piece=void 0,this.el.classList.remove(...Array.from(this.el.classList).filter(e=>e.includes("-")))}}class G{tile;x;y;type;color;constructor(e,t,i,o,s){this.tile=e,this.x=i,this.y=t,this.type=o,this.color=s}Move(e,t,i){this.tile=e,this.y=t,this.x=i}Promote(e){this.type==h.Pawn&&(this.type=e,this.tile.AddPiece(this))}}class f{piece;startY;startX;endY;endX;capturedPiece;promotionType;isCapture;isCastle;isShortCastle;isEnpassant;isPromotion;isCheck=!1;isCheckMate=!1;isStaleMate=!1;constructor(e,t,i,o,s,r){this.piece=e,this.startY=t,this.startX=i,this.endY=o,this.endX=s,this.capturedPiece=r?.capturedPiece,this.isCapture=r?.capturedPiece!=null,this.isCastle=r?.isCastle??!1,this.isShortCastle=r?.isShortCastle??!1,this.isEnpassant=r?.isEnpassant??!1,this.isPromotion=r?.isPromotion??!1,this.promotionType=r?.promotionType}}const K={[h.Pawn]:[],[h.Knight]:[[1,2,!1],[2,1,!1],[-1,2,!1],[-2,1,!1],[1,-2,!1],[2,-1,!1],[-1,-2,!1],[-2,-1,!1]],[h.Bishop]:[[1,1,!0],[1,-1,!0],[-1,1,!0],[-1,-1,!0]],[h.Rook]:[[1,0,!0],[-1,0,!0],[0,1,!0],[0,-1,!0]],[h.Queen]:[[1,0,!0],[-1,0,!0],[0,1,!0],[0,-1,!0],[1,1,!0],[1,-1,!0],[-1,1,!0],[-1,-1,!0]],[h.King]:[[1,0,!1],[-1,0,!1],[0,1,!1],[0,-1,!1],[1,1,!1],[1,-1,!1],[-1,1,!1],[-1,-1,!1]]};class R{static ConsoleBoard(e){for(let t=7;t>=0;t--){let i="";for(let o=0;o<8;o++){const s=e[t][o];i+=`${s.x}${s.y}${s.piece?`${s.piece.color[0]}${s.piece.type[0]}`:"XX"} `}console.log(i)}}}class m{static CheckCheck(e,t){let i=t.color===u.White?u.Black:u.White;return m.IsPawnCheck(e,t,i)||m.IsPieceCheck(e,t,i)}static FindKing(e,t){for(let i=0;i<8;i++)for(let o=0;o<8;o++){const s=e[i][o].piece;if(s&&s.type==h.King&&s.color==t)return s}throw R.ConsoleBoard(e),new Error("Cant find king")}static IsPieceCheck(e,t,i){const o=[h.Knight,h.Bishop,h.Rook,h.Queen,h.King];for(const s of o)for(const[r,l,n]of K[s]){let a=t.x+r,c=t.y+l;for(;a>=0&&a<8&&c>=0&&c<8;){const d=e[c][a];if(d.piece){if(d.piece.color===i&&d.piece.type===s)return!0;break}if(!n)break;a+=r,c+=l}}return!1}static IsPawnCheck(e,t,i){let o=i===u.White?-1:1;for(let s of[-1,1]){let r=t.x+s,l=t.y+o;if(r>=0&&r<8&&l>=0&&l<8){const a=e[l][r].piece;if(a&&a.type===h.Pawn&&a.color===i)return!0}}return!1}}class T{static GetPawnMoves(e,t,i){const o=[],s=[-1,1],r=t.x,l=t.y,n=t.color==u.White?1:-1,a=t.color==u.White?1:6,c=t.color==u.White?7:0,d=t.color==u.White?4:3,p=[h.Knight,h.Bishop,h.Rook,h.Queen];return e.board[l+n][r].piece==null&&(l+n==c?p.forEach(v=>{o.push(new f(t,t.y,t.x,l+n,r,{isPromotion:!0,promotionType:v}))}):o.push(new f(t,t.y,t.x,l+n,r)),l==a&&e.board[l+2*n][r].piece==null&&l==a&&o.push(new f(t,t.y,t.x,l+2*n,r))),s.forEach(v=>{if(r+v<0||r+v>7)return;const b=e.board[l+n][r+v];b.piece&&b.piece.color!=t.color&&(l+n==c?p.forEach(k=>{o.push(new f(t,t.y,t.x,l+n,r+v,{capturedPiece:b.piece,isPromotion:!0,promotionType:k}))}):o.push(new f(t,t.y,t.x,l+n,r+v,{capturedPiece:b.piece})));const g=e.board[l][r+v];if(b.piece==null&&g.piece&&g.piece.color!=t.color&&g.piece.type==h.Pawn&&l==d){const k=i[i.length-1];if(k){const y=t.color===u.White?k[1]:k[0];y&&y.piece.type===h.Pawn&&y.piece===g.piece&&Math.abs(y.startY-y.endY)===2&&y.endX===r+v&&y.endY===l&&o.push(new f(t,t.y,t.x,l+n,r+v,{capturedPiece:g.piece,isEnpassant:!0}))}}}),o}static GetNonPawnMoves(e,t){const i=[];return K[t.type].forEach(([o,s,r])=>{let l=t.x+o,n=t.y+s;for(;l>=0&&l<8&&n>=0&&n<8;){const a=e.board[n][l];if(a.piece){a.piece.color!=t.color&&i.push(new f(t,t.y,t.x,n,l,{capturedPiece:a.piece}));break}else i.push(new f(t,t.y,t.x,n,l));if(!r)break;l+=o,n+=s}}),i}static GetCastleMoves(e,t,i){const o=[],s=t.color==u.White?0:7;if(t.x!=4||t.y!=s)return[];if(this.HasMoved(t,i))return[];const a=e.board[t.y][7].piece;if(a&&a.type==h.Rook&&a.color==t.color&&!this.HasMoved(a,i)&&e.board[t.y][5].piece==null&&e.board[t.y][6].piece==null&&this.IsSafeForKing(e,t,5)){let v=new f(t,t.y,t.x,t.y,6,{isCastle:!0,isShortCastle:!0});o.push(v)}const d=e.board[t.y][0].piece;if(d&&d.type==h.Rook&&d.color==t.color&&!this.HasMoved(d,i)&&e.board[t.y][3].piece==null&&e.board[t.y][2].piece==null&&e.board[t.y][1].piece==null&&this.IsSafeForKing(e,t,3)){let v=new f(t,t.y,t.x,t.y,2,{isCastle:!0,isShortCastle:!1});o.push(v)}return o}static HasMoved(e,t){return t.some(([i,o])=>i&&i.piece==e||o&&o.piece==e)}static IsSafeForKing(e,t,i){const o=e.board[t.y][t.x];o.RemovePiece();const s=e.board[t.y][i];s.AddPiece(t);let r=t.x;t.Move(s,t.y,i);let l=m.CheckCheck(e.board,t);return t.Move(o,t.y,r),o.AddPiece(t),s.RemovePiece(),!l}}class I{constructor(e,t,i){this.HandleClick=t,this.board=this.CreateBoard(e),this.HandleClick=t,this.moveLog=i}board;whiteKing;blackKing;moveLog;CreateBoard(e){const t=[];for(let i=7;i>=0;i--){let o=[];for(let s=0;s<8;s++){let r=new A(i,s,e,this.HandleClick);if(i==0||i==1||i==6||i==7){let l=i==0||i==1?u.White:u.Black,n=h.Pawn;(i==0||i==7)&&(s==0||s==7?n=h.Rook:s==1||s==6?n=h.Knight:s==2||s==5?n=h.Bishop:s==3?n=h.Queen:s==4&&(n=h.King));let a=new G(r,i,s,n,l);a.type==h.King&&(a.color==u.White?this.whiteKing=a:this.blackKing=a),r.AddPiece(a)}o.push(r)}t[i]=o}return t}GetMoves(e){let t=[];return this.board.forEach(i=>{i.forEach(o=>{if(o.piece!=null&&o.piece.color==e){const s=this.GetPieceMoves(o.piece);t=[...t,...s]}})}),t}GetPieceMoves(e){let t;if(e.type==h.Pawn)t=T.GetPawnMoves(this,e,this.moveLog);else if(t=T.GetNonPawnMoves(this,e),e.type==h.King){let i=T.GetCastleMoves(this,e,this.moveLog);t=[...t,...i]}return t}}class W{constructor(e,t,i){this.MakeMove=t,this.OpenModal=i,this.currentTile=null,this.turn=e,this.highlightedTiles=[],this.MakeMove=t,this.OpenModal=i}currentTile;moveList;turn;board;highlightedTiles;SetBoard(e){this.board=e}SetMoveList(e,t){this.moveList=e,this.turn=t}GetMoveEnd(e){return this.moveList.filter(o=>o.startX==e.x&&o.startY==e.y).map(o=>[o.endX,o.endY])}HandleClick(e){const t=e.piece&&e.piece.color==this.turn,i=this.currentTile!=null;if(t){const o=this.GetMoveEnd(e);o.length>0&&(this.currentTile&&this.UnHighlightCurrent([this.currentTile.x,this.currentTile.y]),this.currentTile=e,this.HightlightCurrent([e.x,e.y]),this.highlightedTiles.forEach(s=>this.UnHighLightTile(s)),this.HighlightPosTiles(o));return}if(i&&this.highlightedTiles.some(([s,r])=>s==e.x&&e.y==r)&&this.currentTile){this.highlightedTiles.forEach(r=>this.UnHighLightTile(r));let s=this.GetMoveFromCords(this.currentTile.x,this.currentTile.y,e.x,e.y);if(s){if(s.isPromotion)return this.OpenModal(this.HandlePromotion.bind(this),s);this.UnHighlightCurrent([this.currentTile.x,this.currentTile.y]),this.MakeMove(s)}this.UnHighlightCurrent([this.currentTile.x,this.currentTile.y]),this.currentTile=null}}HandlePromotion(e){if(console.log(this.currentTile),this.currentTile==null)throw new Error("TILE NOT INITIALIZED");this.UnHighlightCurrent([this.currentTile.x,this.currentTile.y]),this.MakeMove(e),this.currentTile=null}GetMoveFromCords(e,t,i,o){return this.moveList.find(r=>r.startX===e&&r.startY===t&&r.endX===i&&r.endY===o)}HighlightPosTiles(e){e.forEach(t=>{this.highlightedTiles.push(t),this.HighLightTile(t)})}HighLightTile(e){this.board[e[1]][e[0]].el.classList.add("highlighted")}HightlightCurrent(e){this.board[e[1]][e[0]].el.classList.add("current")}UnHighlightCurrent(e){this.board[e[1]][e[0]].el.classList.remove("current")}UnHighLightTile(e){this.board[e[1]][e[0]].el.classList.remove("highlighted")}}class U{board;isAiMove;isMoving=!1;constructor(e,t=!1){this.board=e,this.isAiMove=t}MakeMove(e){let t=e.startX,i=e.startY,o=e.endX,s=e.endY,r=this.board[i][t],l=this.board[s][o];if(!r.piece||r.piece!=e.piece)throw console.log(e),R.ConsoleBoard(this.board),new Error("Start Tile doesn't contain piece");const n=r.piece;if(e.isPromotion&&e.promotionType&&(n.type=e.promotionType),e.isCapture&&(e.isEnpassant?this.board[i][o].RemovePiece():l.RemovePiece()),r.RemovePiece(),l.AddPiece(n),e.isCastle)if(e.isShortCastle){const a=this.board[n.y][7],c=a.piece;a.RemovePiece();const d=this.board[n.y][5];c&&(d.AddPiece(c),c.Move(d,n.y,5))}else{const a=this.board[n.y][0],c=a.piece;a.RemovePiece();const d=this.board[n.y][3];c&&(d.AddPiece(c),c.Move(d,n.y,3))}n.Move(l,s,o)}UnMakeMove(e){let t=e.startX,i=e.startY,o=e.endX,s=e.endY,r=this.board[i][t],l=this.board[s][o];if(!l.piece||l.piece!=e.piece)throw new Error("End Tile doesn't contain piece");const n=l.piece;if(e.isPromotion&&(n.type=h.Pawn),l.RemovePiece(),r.AddPiece(n),n.Move(r,i,t),e.capturedPiece&&(e.isEnpassant?this.board[i][o].AddPiece(e.capturedPiece):l.AddPiece(e.capturedPiece)),e.isCastle)if(e.isShortCastle){const a=this.board[n.y][5],c=a.piece;a.RemovePiece();const d=this.board[n.y][7];c&&(d.AddPiece(c),c.Move(d,n.y,7))}else{const a=this.board[n.y][3],c=a.piece;a.RemovePiece();const d=this.board[n.y][0];c&&(d.AddPiece(c),c.Move(d,n.y,0))}}}class N{constructor(e,t,i,o,s,r){this.makeMove=o,this.unMakeMove=s,this.checkCheck=r,this.board=e,this.whiteKing=t,this.blackKing=i,this.makeMove=o,this.unMakeMove=s,this.checkCheck=r}board;whiteKing;blackKing;FilterMoves(e,t,i,o,s,r){const l=t==u.White?this.whiteKing:this.blackKing,n=t==u.White?this.blackKing:this.whiteKing,a=[];for(const c of e){if(this.makeMove(c),this.checkCheck(this.board,l)){this.unMakeMove(c);continue}this.checkCheck(this.board,n)&&this.HandleMoveCheck(c),a.push(c),this.unMakeMove(c)}return a.length==0&&!r&&(s(t)?i("CheckMate"):o("StaleMate")),a}HandleMoveCheck(e){e.isCheck=!0}}const x={[h.Pawn]:{Mid:[[0,0,0,0,0,0,0,0],[50,50,50,50,50,50,50,50],[10,10,20,30,30,20,10,10],[5,5,10,25,25,10,5,5],[0,0,0,20,20,0,0,0],[5,-5,-10,0,0,-10,-5,5],[5,10,10,-20,-20,10,10,5],[0,0,0,0,0,0,0,0]],End:[[0,0,0,0,0,0,0,0],[50,50,50,50,50,50,50,50],[10,10,20,30,30,20,10,10],[5,5,10,25,25,10,5,5],[0,0,0,20,20,0,0,0],[5,-5,-10,0,0,-10,-5,5],[5,10,10,-20,-20,10,10,5],[0,0,0,0,0,0,0,0]]},[h.Knight]:{Mid:[[-50,-40,-30,-30,-30,-30,-40,-50],[-40,-20,0,0,0,0,-20,-40],[-30,0,10,15,15,10,0,-30],[-30,5,15,20,20,15,5,-30],[-30,0,15,20,20,15,0,-30],[-30,5,10,15,15,10,5,-30],[-40,-20,0,5,5,0,-20,-40],[-50,-40,-30,-30,-30,-30,-40,-50]],End:[[-50,-40,-30,-30,-30,-30,-40,-50],[-40,-20,0,0,0,0,-20,-40],[-30,0,10,15,15,10,0,-30],[-30,5,15,20,20,15,5,-30],[-30,0,15,20,20,15,0,-30],[-30,5,10,15,15,10,5,-30],[-40,-20,0,5,5,0,-20,-40],[-50,-40,-30,-30,-30,-30,-40,-50]]},[h.Bishop]:{Mid:[[-20,-10,-10,-10,-10,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,10,10,5,0,-10],[-10,5,5,10,10,5,5,-10],[-10,0,10,10,10,10,0,-10],[-10,10,10,10,10,10,10,-10],[-10,5,0,0,0,0,5,-10],[-20,-10,-10,-10,-10,-10,-10,-20]],End:[[-20,-10,-10,-10,-10,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,10,10,5,0,-10],[-10,5,5,10,10,5,5,-10],[-10,0,10,10,10,10,0,-10],[-10,10,10,10,10,10,10,-10],[-10,5,0,0,0,0,5,-10],[-20,-10,-10,-10,-10,-10,-10,-20]]},[h.Rook]:{Mid:[[0,0,0,0,0,0,0,0],[5,10,10,10,10,10,10,5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[0,0,0,5,5,0,0,0]],End:[[0,0,0,0,0,0,0,0],[5,10,10,10,10,10,10,5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[0,0,0,5,5,0,0,0]]},[h.Queen]:{Mid:[[-20,-10,-10,-5,-5,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,5,5,5,0,-10],[-5,0,5,5,5,5,0,-5],[0,0,5,5,5,5,0,-5],[-10,5,5,5,5,5,0,-10],[-10,0,5,0,0,0,0,-10],[-20,-10,-10,-5,-5,-10,-10,-20]],End:[[-20,-10,-10,-5,-5,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,5,5,5,0,-10],[-5,0,5,5,5,5,0,-5],[0,0,5,5,5,5,0,-5],[-10,5,5,5,5,5,0,-10],[-10,0,5,0,0,0,0,-10],[-20,-10,-10,-5,-5,-10,-10,-20]]},[h.King]:{Mid:[[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-20,-30,-30,-40,-40,-30,-30,-20],[-10,-20,-20,-20,-20,-20,-20,-10],[20,20,0,0,0,0,20,20],[20,30,10,0,0,10,30,20]],End:[[-50,-40,-30,-20,-20,-30,-40,-50],[-30,-20,-10,0,0,-10,-20,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-30,0,0,0,0,-30,-30],[-50,-30,-30,-30,-30,-30,-30,-50]]}},E={[h.Pawn]:100,[h.Knight]:300,[h.Bishop]:320,[h.Rook]:500,[h.Queen]:900,[h.King]:0},F={[h.Pawn]:0,[h.Knight]:1,[h.Bishop]:1,[h.Rook]:2,[h.Queen]:4,[h.King]:0};class X{static EvalBoard(e){let[t,i]=this.FindMaterialScore(e);return t-i}static FindMaterialScore(e){let t=0,i=0,o=0,s,r;for(let a=0;a<8;a++)for(let c=0;c<8;c++){const d=e[a][c].piece;if(!d)continue;o+=F[d.type];let p=E[d.type];const v=x[d.type];if(d.type==h.King){d.color==u.White?r=d:s=d;continue}let b=v.Mid[d.color==u.White?7-d.y:d.y][d.x];d.color==u.White?i+=p+b:t+=p+b}if(!r||!s)throw new Error("Kings not found");const l=x[h.King],n=Math.max(0,Math.min(1,o/24));return i+=n*l.Mid[7-r.y][r.x]+(1-n)*l.End[7-r.y][r.x],t+=n*l.Mid[s.y][s.x]+(1-n)*l.End[s.y][s.x],[i,t]}}class Y{static OrderForABPrune(e){return e.sort((t,i)=>this.ScoreMove(i)-this.ScoreMove(t))}static ScoreMove(e){let t=0;return e.isPromotion&&e.promotionType?t+=1e6+E[e.promotionType]:(e.isCapture&&e.capturedPiece&&(t+=1e4+10*E[e.capturedPiece.type]-E[e.piece.type]),e.isCheck&&(t+=5e3),t)}}class O{constructor(e,t,i,o,s){this.MakeMove=t,this.UnMakeMove=i,this.GetMoves=o,this.IsCheck=s,this.board=e,this.MakeMove=t,this.UnMakeMove=i,this.GetMoves=o,this.IsCheck=s}board;MateScore=1e6;GetEvalutation(){return X.EvalBoard(this.board)}SortMoveList(e){return Y.OrderForABPrune(e)}GetSortedMoveList(e){return this.SortMoveList(this.GetMoves(e,!0))}GetBestMove(e,t,i){let o=Number.MIN_SAFE_INTEGER,s=Number.MIN_SAFE_INTEGER,r=Number.MAX_SAFE_INTEGER,l;const n=t==u.White?u.Black:u.White,a=this.SortMoveList(i);for(let c of a){this.MakeMove(c);let d=this.Beta(e-1,e,t,n,s,r);d>o&&(o=d,l=c),s=Math.max(s,o),this.UnMakeMove(c)}if(l==null)throw new Error("No moves");return[l,o]}Alpha(e,t,i,o,s,r){if(e<=0)return this.GetEvalutation()*(i==u.White?1:-1);const l=this.GetSortedMoveList(i);if(l.length==0)return this.IsCheck(i)?-this.MateScore+100*(t-e):0;let n=Number.MIN_SAFE_INTEGER;for(let a of l){this.MakeMove(a);let c=this.Beta(e-1,t,i,o,s,r);if(n=Math.max(c,n),s=Math.max(s,n),this.UnMakeMove(a),r<=s)break}return n}Beta(e,t,i,o,s,r){if(e<=0)return this.GetEvalutation()*(i==u.White?1:-1);const l=this.GetSortedMoveList(o);if(l.length==0)return this.IsCheck(o)?this.MateScore-100*(t-e):0;let n=Number.MAX_SAFE_INTEGER;for(let a of l){this.MakeMove(a);let c=this.Alpha(e-1,t,i,o,s,r);if(n=Math.min(c,n),r=Math.min(r,n),this.UnMakeMove(a),r<=s)break}return n}}class Q{board;color;currentMoves;moveLog=[];moveHandler;moveExecuter;moveFilter;boardElement;promotionalModal;restartButton;undoMove;reverseBoard;depthSelector;outcomeText;Agent;isAiMove=!1;aiDepth=2;constructor(e,t,i,o,s,r,l){this.boardElement=e,this.promotionalModal=t,this.restartButton=i,this.undoMove=o,this.reverseBoard=s,this.depthSelector=r,this.outcomeText=l,this.SetUpBoard(),this.SetUpButtons()}SetUpButtons(){this.restartButton.onclick=()=>this.SetUpBoard(),this.undoMove.onclick=()=>{this.outcomeText.textContent="",this.UnMakeMove(this.GetLastMove()),this.UnMakeMove(this.GetLastMove()),this.GetSetMoves(this.color)},this.reverseBoard.onclick=()=>{this.SetUpBoard(),this.boardElement.classList.toggle("rotated"),this.boardElement.classList.contains("rotated")&&(this.isAiMove=!0,this.HandleAiMove())},this.depthSelector.onchange=()=>{this.aiDepth=Number.parseInt(this.depthSelector.value)}}GetLastMove(){let e=this.moveLog[this.moveLog.length-1][0],t=this.moveLog[this.moveLog.length-1][1];if(t==null&&e)return e;if(t)return t;throw new Error("move null")}HandlePlayerMove(e){this.MakeMove(e),this.GetSetMoves(this.color),this.isAiMove=!0,this.HandleAiMove()}HandleAiMove(){let e=this.Agent.GetBestMove(this.aiDepth,this.color,this.currentMoves);this.MakeMove(e[0]),this.GetSetMoves(this.color),this.isAiMove=!1}HandleCheckMate(){this.outcomeText.textContent=`CHECKMATE - ${(this.color==u.White?u.Black:u.White).toUpperCase()} WINS`}HandleStaleMate(){this.outcomeText.textContent="STALEMATE - DRAW"}IsCheck(e){return m.CheckCheck(this.board.board,m.FindKing(this.board.board,e))}MakeMove(e){this.moveExecuter.MakeMove(e),e.piece.color==u.White?this.moveLog.push([e,null]):this.moveLog[this.moveLog.length-1][1]=e,this.color=this.color==u.White?u.Black:u.White}UnMakeMove(e){this.moveExecuter.UnMakeMove(e),e.piece.color==u.White?this.moveLog.pop():this.moveLog[this.moveLog.length-1][1]=null,this.color=this.color==u.White?u.Black:u.White}GetSetMoves(e){const t=this.GetMoves(e);this.SetMoves(t)}GetMoves(e,t=!1){let i=this.board.GetMoves(e);return this.moveFilter.FilterMoves(i,e,this.HandleCheckMate.bind(this),this.HandleStaleMate.bind(this),this.IsCheck.bind(this),t)}SetMoves(e){this.currentMoves=e,this.moveHandler.SetMoveList(e,this.color)}OpenModal(e,t){this.promotionalModal.classList.add("show"),this.promotionalModal.style.display="block",this.promotionalModal.querySelectorAll("button").forEach(o=>{o.onclick=()=>{const s=o.dataset.piece;let r;switch(s){case"rook":r=h.Rook;break;case"bishop":r=h.Bishop;break;case"knight":r=h.Knight;break;default:r=h.Queen}this.promotionalModal.classList.add("show"),this.promotionalModal.style.display="none",t.promotionType=r,e(t)}})}SetUpBoard(){this.outcomeText.textContent="",this.boardElement.classList.remove("rotated"),this.boardElement.innerHTML="",this.moveLog=[],this.color=u.White,this.moveHandler=new W(this.color,this.HandlePlayerMove.bind(this),this.OpenModal.bind(this)),this.board=new I(this.boardElement,this.moveHandler.HandleClick.bind(this.moveHandler),this.moveLog),this.moveHandler.SetBoard(this.board.board),this.moveExecuter=new U(this.board.board,!1),this.moveFilter=new N(this.board.board,this.board.whiteKing,this.board.blackKing,this.moveExecuter.MakeMove.bind(this.moveExecuter),this.moveExecuter.UnMakeMove.bind(this.moveExecuter),m.CheckCheck),this.Agent=new O(this.board.board,this.MakeMove.bind(this),this.UnMakeMove.bind(this),this.GetMoves.bind(this),this.IsCheck.bind(this)),this.GetSetMoves(this.color)}}document.querySelector("#app").innerHTML=`
  <div style="display: flex; flex-direction: column; align-items: center;">
    <h1>CHESS</h1>

    <!-- Controls -->
    <div id="controls" style="margin-top: -20px; margin-bottom: 10px; display: flex; gap: 15px; align-items: center;">
      <!-- Back Arrow -->
      <button id="undoMove" style="font-size: 18px;">⬅ Undo</button>

      <!-- Depth Selector -->
      <label for="depthSelect">Depth:</label>
      <select id="depthSelect">
        <option value="1">1</option>
        <option value="2" selected>2</option>
        <option value="3">3</option>
        <option value="4">4</option>
      </select>

      <!-- Reverse Board -->
      <button id="reverseBoardBtn">Reverse Board</button>
      <!-- Restart Button -->
      <button id="restartBtn" style="color: red; font-weight: bold;">Restart</button>

    </div>

    </div>

    <!-- Chessboard -->
    <div id="board"></div>

    <!-- Promotion Modal -->
    <div id="promotionModal" 
      style="display: none; position: absolute; top: 50%; left: 50%; 
      transform: translate(-50%, -50%); background: white; padding: 10px; 
      border: 2px solid black; z-index: 100;">
      <p>Choose promotion:</p>
      <button data-piece="queen">Queen</button>
      <button data-piece="rook">Rook</button>
      <button data-piece="bishop">Bishop</button>
      <button data-piece="knight">Knight</button>
    </div>

    <div id="outcome"></div>
  </div>
`;const P=document.getElementById("board"),S=document.getElementById("promotionModal"),C=document.getElementById("depthSelect"),w=document.getElementById("undoMove"),L=document.getElementById("reverseBoardBtn"),B=document.getElementById("restartBtn"),H=document.getElementById("outcome");P&&P instanceof HTMLDivElement&&S&&S instanceof HTMLDivElement&&C&&C instanceof HTMLSelectElement&&w&&w instanceof HTMLElement&&L&&L instanceof HTMLElement&&B&&B instanceof HTMLElement&&H&&H instanceof HTMLDivElement&&new Q(P,S,B,w,L,C,H);
